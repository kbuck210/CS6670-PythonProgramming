## CS672 - Python Programming
## Homework 3 - Sample Output
## Kevin C. Buckley
## 10/3/14

###################################################
##  Step 1: Separate Data into Data_load module	 ##
###################################################
# Separated list of quotes into the data_load.py file, and imported the data into
# the Quotes.py file via a function returning the list of data. Existing logic still
# operates as intended:

Kevins-MacBook-Air-2:Homework3 kbuck$ ls
Quotes.py		file_traverser.py	indexer.py
data_load.py		fortune1		raw_data.pickle
Kevins-MacBook-Air-2:Homework3 kbuck$ Python3 Quotes.py
query:sheep and flowers
Performing AND search for: {'flowers', 'sheep'}
Found at 31 For millions of years flowers have been producing thorns. For millions of years sheep have been eating them all the same. And it's not serious, trying to understand why flowers go to such trouble to produce thorns that are good for nothing? It's not important, the war between the sheep and the flowers? It's no more serious and more important than the numbers that fat red gentleman is adding up? Suppose I happen to know a unique flower, one that exists nowhere in the world except on my planet, one that a little sheep can wipe out in a single bite one morning, just like that, without even realizing what he'd doing - that isn't important? If someone loves a flower of which just one example exists among all the millions and millions of stars, that's enough to make him happy when he looks at the stars. He tells himself 'My flower's up there somewhere...' But if the sheep eats the flower, then for him it's as if, suddenly, all the stars went out. And that isn't important?
Search execution time (ms): 93
Kevins-MacBook-Air-2:Homework3 kbuck$

#################################################################
##  Step 2: Create File Traverser to read .txt and .log files  ##
#################################################################
# Created a file_traverser.py module to walk the starting directory, opening& reading
# each .txt file or .log file, storing the file path and the file data in a list of
# tuples that get pickled to the binary file “raw_data.pickle”

# Original Directory contents:
Kevins-MacBook-Air-2:Homework3 kbuck$ ls
Quotes.py		file_traverser.py	indexer.py
data_load.py		fortune1

# File traverser command & first several lines of output:
Kevins-MacBook-Air-2:Homework3 kbuck$ Python3 file_traverser.py
Created tuple with fortune1.log content and /Users/kbuck/Documents/School Stuff/CS670 - Python/Homework3/fortune1/fortune1.log path
Created tuple with fortune1.txt content and /Users/kbuck/Documents/School Stuff/CS670 - Python/Homework3/fortune1/fortune1.txt path
Created tuple with fortune2.log content and /Users/kbuck/Documents/School Stuff/CS670 - Python/Homework3/fortune1/fortune2/fortune2.log path
Created tuple with fortune2.txt content and /Users/kbuck/Documents/School Stuff/CS670 - Python/Homework3/fortune1/fortune2/fortune2.txt path

# Updated Directory contents (“raw_data.pickle” file created)
Kevins-MacBook-Air-2:Homework3 kbuck$ ls
Quotes.py		file_traverser.py	indexer.py
data_load.py		fortune1		raw_data.pickle
Kevins-MacBook-Air-2:Homework3 kbuck$ 

#############################################################
##  Step 3: Move File Traverser to method in data_load.py  ##
#############################################################
# As the code to traverse my file structure was already in a method in “file_traverser.py”
# I opted to import file_traverser in “data_load.py”, and return the result of my
# traverse_dirs() method in “file_traverser.py” as the return value for 
# data_load.get_traversal_data().  This seemed like a cleaner solution, and the results
# are the same, as shown below:

# Importing data_load in Python shell, and running get_traversal_data() method, shown are
# the first several lines of output.
Kevins-MacBook-Air-2:Homework3 kbuck$ Python3
Python 3.4.1 (v3.4.1:c0e311e010fc, May 18 2014, 00:54:21) 
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> import data_load
>>> data_load.get_traversal_data()
Created tuple with fortune1.log and /Users/kbuck/Documents/School Stuff/CS670 - Python/Homework3/fortune1/fortune1.log path
Created tuple with fortune1.txt and /Users/kbuck/Documents/School Stuff/CS670 - Python/Homework3/fortune1/fortune1.txt path
Created tuple with fortune2.log and /Users/kbuck/Documents/School Stuff/CS670 - Python/Homework3/fortune1/fortune2/fortune2.log path
Created tuple with fortune2.txt and /Users/kbuck/Documents/School Stuff/CS670 - Python/Homework3/fortune1/fortune2/fortune2.txt path

###############################################################
##  Step 4: Use search_combine.py to perform index & search  ##
###############################################################
# Import the data_load, searcher & indexer modules into “search_combine.py”, and call 
# the methods to index the data from data_load, and pass it to the searcher to perform
# the search on the indexed data:
Kevins-MacBook-Air-2:Homework3 kbuck$ Python3 search_combine.py
query:sheep and flowers
Performing AND search for: {'flowers', 'sheep'}
Found at 31 For millions of years flowers have been producing thorns. For millions of years sheep have been eating them all the same. And it's not serious, trying to understand why flowers go to such trouble to produce thorns that are good for nothing? It's not important, the war between the sheep and the flowers? It's no more serious and more important than the numbers that fat red gentleman is adding up? Suppose I happen to know a unique flower, one that exists nowhere in the world except on my planet, one that a little sheep can wipe out in a single bite one morning, just like that, without even realizing what he'd doing - that isn't important? If someone loves a flower of which just one example exists among all the millions and millions of stars, that's enough to make him happy when he looks at the stars. He tells himself 'My flower's up there somewhere...' But if the sheep eats the flower, then for him it's as if, suddenly, all the stars went out. And that isn't important?
Search execution time (ms): 84
Kevins-MacBook-Air-2:Homework3 kbuck$ 

#############################################################
##  Step 5: Modify search to search indexed unpicked data  ##
#############################################################
# Unpickled data in indexer populates dictionary mapped values, search displays
# resulting files the words are found in
Kevins-MacBook-Air-2:Homework3 kbuck$ !!
Python3 search_combine.py
query:world and woods
Performing AND search for: {'world', 'woods'}
Found in /Users/kbuck/Documents/School Stuff/CS670 - Python/Homework3/fortune15.log
Found in /Users/kbuck/Documents/School Stuff/CS670 - Python/Homework3/fortune2.txt
Search execution time (ms): 290
Kevins-MacBook-Air-2:Homework3 kbuck$ 

################################################################
##  Step 6: Use shelving to pass data between index & search  ##
################################################################
# Modified the indexer to write each key in the dictionary to a new entry in the 
# shelved file, storing it’s corresponding tuple of correlated files. The indexer
# returns the name of the shelf file, which it passes to the searcher, which reads
# the file and accesses it’s values to conduct the search
Kevins-MacBook-Air-2:Homework3 kbuck$ !!
Python3 search_combine.py
query:will and yet
Performing AND search for: {'yet', 'will'}
Found in /Users/kbuck/Documents/School Stuff/CS670 - Python/Homework3/fortune14.log
Found in /Users/kbuck/Documents/School Stuff/CS670 - Python/Homework3/fortune10.txt
Found in /Users/kbuck/Documents/School Stuff/CS670 - Python/Homework3/fortune10.log
Found in /Users/kbuck/Documents/School Stuff/CS670 - Python/Homework3/fortune11.log
Found in /Users/kbuck/Documents/School Stuff/CS670 - Python/Homework3/fortune15.log
Found in /Users/kbuck/Documents/School Stuff/CS670 - Python/Homework3/fortune6.txt
Search execution time (ms): 1597
Kevins-MacBook-Air-2:Homework3 kbuck$

